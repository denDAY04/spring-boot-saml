package dk.asj.springsaml.controller

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.mock.web.MockHttpSession
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders
import org.springframework.test.web.servlet.result.MockMvcResultMatchers
import spock.lang.Specification

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*

@SpringBootTest
@AutoConfigureMockMvc
class HomeControllerSpec extends Specification {
  static final String SIGNED_RESPONSE = "";

  @Autowired
  MockMvc client

  def 'should allow all access to /'() {
    when:
    def response = client.perform(get('/'))

    then:
    response.andExpect(status().isOk())
    response.andExpect(content().string('hello from unrestricted endpoint'))
  }

  def 'should require sso authentication for secured endpoint'() {
    given:
    def baseUrl = 'http://localhost:8080'
    def securedEndpoint = "${baseUrl}/secret"

    when: 'accessing secured endpoint with no authentication'
    def accessResponse = client.perform(get(securedEndpoint))
    def session = accessResponse.andReturn().getRequest().getSession()

    then: 'should redirect to authentication endpoint'
    accessResponse
      .andExpect(status().is3xxRedirection())
      .andExpect(redirectedUrl("${baseUrl}/saml2/authenticate/metadata"))

    when: 'supplying SAML auth response to login endpoint'
    def loginResponse = client.perform(
      post("${baseUrl}/login/saml2/sso")
        .param('SAMLResponse', SIGNED_RESPONSE)
        .session((MockHttpSession) session)
    )

    then: 'user should be directed to the secured endpoint initially requested'
    loginResponse.andExpect(redirectedUrl(securedEndpoint))

    when: 'accessing endpoint with authentication'
    def authenticatedResponse = client.perform(
      get(securedEndpoint)
        .session((MockHttpSession) session)
    )

    then: 'user is grated access to secured endpoint'
    authenticatedResponse
      .andExpect(status().isOk())
      .andExpect(content().string('hello from a secret endpoint'))
  }
}
